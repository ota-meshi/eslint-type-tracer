// test-snapshot v1

exports[`type-tracer-for-es buildTypeTracerForES array.js const a = [1, 2, 3, 4, 5];

target(a);

target(a[Symbol.iterator]);
target(a[Symbol.iterator]());
 1`] = `
Array [
  Object {
    "args": Object {
      "a": Array [
        "Array",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a[Symbol.iterator]": Array [
        "Function",
      ],
    },
    "expr": "target(a[Symbol.iterator])",
  },
  Object {
    "args": Object {
      "a[Symbol.iterator]()": Array [
        "Iterator",
      ],
    },
    "expr": "target(a[Symbol.iterator]())",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES assignment.js target((foo -= bar), (foo -= 42), (foo -= 42n));

target((foo *= bar), (foo *= 42), (foo *= 42n));

target((foo /= bar), (foo /= 42), (foo /= 42n));

target((foo %= bar), (foo %= 42), (foo %= 42n));

target((foo ^= bar), (foo ^= 42), (foo ^= 42n));

target((foo **= bar), (foo **= 42), (foo **= 42n));

target((foo &= bar), (foo &= 42), (foo &= 42n));

target((foo |= bar), (foo |= 42), (foo |= 42n));

function _1() {
  let a = 1;
  const b = 1;
  let c = 1n;
  const d = 1n;
  target((a &&= b), (c &&= d), (foo &&= bar), (foo &&= 42), (foo &&= 42n));
}

function _2() {
  let a = 1;
  const b = 1;
  let c = 1n;
  const d = 1n;
  target((a ||= b), (c ||= d), (foo ||= bar), (foo ||= 42), (foo ||= 42n));
}

function _3() {
  let a = 1;
  const b = 1;
  let c = 1n;
  const d = 1n;
  target((a ??= b), (c ??= d), (foo ??= bar), (foo ??= 42), (foo ??= 42n));
}
 1`] = `
Array [
  Object {
    "args": Object {
      "foo -= 42": Array [
        "Number",
      ],
      "foo -= 42n": Array [
        "BigInt",
      ],
      "foo -= bar": Array [],
    },
    "expr": "target((foo -= bar), (foo -= 42), (foo -= 42n))",
  },
  Object {
    "args": Object {
      "foo *= 42": Array [
        "Number",
      ],
      "foo *= 42n": Array [
        "BigInt",
      ],
      "foo *= bar": Array [],
    },
    "expr": "target((foo *= bar), (foo *= 42), (foo *= 42n))",
  },
  Object {
    "args": Object {
      "foo /= 42": Array [
        "Number",
      ],
      "foo /= 42n": Array [
        "BigInt",
      ],
      "foo /= bar": Array [],
    },
    "expr": "target((foo /= bar), (foo /= 42), (foo /= 42n))",
  },
  Object {
    "args": Object {
      "foo %= 42": Array [
        "Number",
      ],
      "foo %= 42n": Array [
        "BigInt",
      ],
      "foo %= bar": Array [],
    },
    "expr": "target((foo %= bar), (foo %= 42), (foo %= 42n))",
  },
  Object {
    "args": Object {
      "foo ^= 42": Array [
        "Number",
      ],
      "foo ^= 42n": Array [
        "BigInt",
      ],
      "foo ^= bar": Array [],
    },
    "expr": "target((foo ^= bar), (foo ^= 42), (foo ^= 42n))",
  },
  Object {
    "args": Object {
      "foo **= 42": Array [
        "Number",
      ],
      "foo **= 42n": Array [
        "BigInt",
      ],
      "foo **= bar": Array [],
    },
    "expr": "target((foo **= bar), (foo **= 42), (foo **= 42n))",
  },
  Object {
    "args": Object {
      "foo &= 42": Array [
        "Number",
      ],
      "foo &= 42n": Array [
        "BigInt",
      ],
      "foo &= bar": Array [],
    },
    "expr": "target((foo &= bar), (foo &= 42), (foo &= 42n))",
  },
  Object {
    "args": Object {
      "foo |= 42": Array [
        "Number",
      ],
      "foo |= 42n": Array [
        "BigInt",
      ],
      "foo |= bar": Array [],
    },
    "expr": "target((foo |= bar), (foo |= 42), (foo |= 42n))",
  },
  Object {
    "args": Object {
      "a &&= b": Array [
        "Number",
      ],
      "c &&= d": Array [
        "BigInt",
      ],
      "foo &&= 42": Array [],
      "foo &&= 42n": Array [],
      "foo &&= bar": Array [],
    },
    "expr": "target((a &&= b), (c &&= d), (foo &&= bar), (foo &&= 42), (foo &&= 42n))",
  },
  Object {
    "args": Object {
      "a ||= b": Array [
        "Number",
      ],
      "c ||= d": Array [
        "BigInt",
      ],
      "foo ||= 42": Array [],
      "foo ||= 42n": Array [],
      "foo ||= bar": Array [],
    },
    "expr": "target((a ||= b), (c ||= d), (foo ||= bar), (foo ||= 42), (foo ||= 42n))",
  },
  Object {
    "args": Object {
      "a ??= b": Array [
        "Number",
      ],
      "c ??= d": Array [
        "BigInt",
      ],
      "foo ??= 42": Array [],
      "foo ??= 42n": Array [],
      "foo ??= bar": Array [],
    },
    "expr": "target((a ??= b), (c ??= d), (foo ??= bar), (foo ??= 42), (foo ??= 42n))",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES atomics.js target(
  Atomics.add(x),
  Atomics.waitAsync(x),
  Atomics.waitAsync(x).async,
  Atomics[Symbol.toStringTag],
);
 1`] = `
Array [
  Object {
    "args": Object {
      "Atomics.add(x)": Array [
        "Number",
      ],
      "Atomics.waitAsync(x)": Array [
        "Object",
      ],
      "Atomics.waitAsync(x).async": Array [
        "Boolean",
      ],
      "Atomics[Symbol.toStringTag]": Array [
        "String",
      ],
    },
    "expr": "target(
  Atomics.add(x),
  Atomics.waitAsync(x),
  Atomics.waitAsync(x).async,
  Atomics[Symbol.toStringTag],
)",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES binary.js target(foo == bar);

target(foo != bar);

target(foo === bar);

target(foo !== bar);

target(foo < bar);

target(foo <= bar);

target(foo > bar);

target(foo >= bar);

target(foo - bar, 42 - bar, foo - 42, 42n - bar, foo - 42n);

target(foo * bar, 42 * bar, foo * 42, 42n * bar, foo * 42n);

target(foo / bar, 42 / bar, foo / 42, 42n / bar, foo / 42n);

target(foo % bar, 42 % bar, foo % 42, 42n % bar, foo % 42n);

target(foo ^ bar, 42 ^ bar, foo ^ 42, 42n ^ bar, foo ^ 42n);

target(foo ** bar, 42 ** bar, foo ** 42, 42n ** bar, foo ** 42n);

target(foo & bar, 42 & bar, foo & 42, 42n & bar, foo & 42n);

target(foo | bar, 42 | bar, foo | 42, 42n | bar, foo | 42n);
 1`] = `
Array [
  Object {
    "args": Object {
      "foo == bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo == bar)",
  },
  Object {
    "args": Object {
      "foo != bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo != bar)",
  },
  Object {
    "args": Object {
      "foo === bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo === bar)",
  },
  Object {
    "args": Object {
      "foo !== bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo !== bar)",
  },
  Object {
    "args": Object {
      "foo < bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo < bar)",
  },
  Object {
    "args": Object {
      "foo <= bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo <= bar)",
  },
  Object {
    "args": Object {
      "foo > bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo > bar)",
  },
  Object {
    "args": Object {
      "foo >= bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(foo >= bar)",
  },
  Object {
    "args": Object {
      "42 - bar": Array [
        "Number",
      ],
      "42n - bar": Array [
        "BigInt",
      ],
      "foo - 42": Array [
        "Number",
      ],
      "foo - 42n": Array [
        "BigInt",
      ],
      "foo - bar": Array [],
    },
    "expr": "target(foo - bar, 42 - bar, foo - 42, 42n - bar, foo - 42n)",
  },
  Object {
    "args": Object {
      "42 * bar": Array [
        "Number",
      ],
      "42n * bar": Array [
        "BigInt",
      ],
      "foo * 42": Array [
        "Number",
      ],
      "foo * 42n": Array [
        "BigInt",
      ],
      "foo * bar": Array [],
    },
    "expr": "target(foo * bar, 42 * bar, foo * 42, 42n * bar, foo * 42n)",
  },
  Object {
    "args": Object {
      "42 / bar": Array [
        "Number",
      ],
      "42n / bar": Array [
        "BigInt",
      ],
      "foo / 42": Array [
        "Number",
      ],
      "foo / 42n": Array [
        "BigInt",
      ],
      "foo / bar": Array [],
    },
    "expr": "target(foo / bar, 42 / bar, foo / 42, 42n / bar, foo / 42n)",
  },
  Object {
    "args": Object {
      "42 % bar": Array [
        "Number",
      ],
      "42n % bar": Array [
        "BigInt",
      ],
      "foo % 42": Array [
        "Number",
      ],
      "foo % 42n": Array [
        "BigInt",
      ],
      "foo % bar": Array [],
    },
    "expr": "target(foo % bar, 42 % bar, foo % 42, 42n % bar, foo % 42n)",
  },
  Object {
    "args": Object {
      "42 ^ bar": Array [
        "Number",
      ],
      "42n ^ bar": Array [
        "BigInt",
      ],
      "foo ^ 42": Array [
        "Number",
      ],
      "foo ^ 42n": Array [
        "BigInt",
      ],
      "foo ^ bar": Array [],
    },
    "expr": "target(foo ^ bar, 42 ^ bar, foo ^ 42, 42n ^ bar, foo ^ 42n)",
  },
  Object {
    "args": Object {
      "42 ** bar": Array [
        "Number",
      ],
      "42n ** bar": Array [
        "BigInt",
      ],
      "foo ** 42": Array [
        "Number",
      ],
      "foo ** 42n": Array [
        "BigInt",
      ],
      "foo ** bar": Array [],
    },
    "expr": "target(foo ** bar, 42 ** bar, foo ** 42, 42n ** bar, foo ** 42n)",
  },
  Object {
    "args": Object {
      "42 & bar": Array [
        "Number",
      ],
      "42n & bar": Array [
        "BigInt",
      ],
      "foo & 42": Array [
        "Number",
      ],
      "foo & 42n": Array [
        "BigInt",
      ],
      "foo & bar": Array [],
    },
    "expr": "target(foo & bar, 42 & bar, foo & 42, 42n & bar, foo & 42n)",
  },
  Object {
    "args": Object {
      "42 | bar": Array [
        "Number",
      ],
      "42n | bar": Array [
        "BigInt",
      ],
      "foo | 42": Array [
        "Number",
      ],
      "foo | 42n": Array [
        "BigInt",
      ],
      "foo | bar": Array [],
    },
    "expr": "target(foo | bar, 42 | bar, foo | 42, 42n | bar, foo | 42n)",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES bit.js target(foo << bar);

target(foo >> bar);

target(foo >>> bar);

target((foo <<= bar));

target((foo >>= bar));

target((foo >>>= bar));
 1`] = `
Array [
  Object {
    "args": Object {
      "foo << bar": Array [
        "Number",
      ],
    },
    "expr": "target(foo << bar)",
  },
  Object {
    "args": Object {
      "foo >> bar": Array [
        "Number",
      ],
    },
    "expr": "target(foo >> bar)",
  },
  Object {
    "args": Object {
      "foo >>> bar": Array [
        "Number",
      ],
    },
    "expr": "target(foo >>> bar)",
  },
  Object {
    "args": Object {
      "foo <<= bar": Array [
        "Number",
      ],
    },
    "expr": "target((foo <<= bar))",
  },
  Object {
    "args": Object {
      "foo >>= bar": Array [
        "Number",
      ],
    },
    "expr": "target((foo >>= bar))",
  },
  Object {
    "args": Object {
      "foo >>>= bar": Array [
        "Number",
      ],
    },
    "expr": "target((foo >>>= bar))",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES global-objects.js target(String(), String\`\`);

target(Number(), Number\`\`);

target(BigInt(), BigInt\`\`);

target(Boolean(), Boolean\`\`);

target(Symbol(), Symbol\`\`);

target(Object(), Object\`\`);

target([], Array\`\`);

target(Function(), Function\`\`);

target(RegExp(), RegExp\`\`);

target(Date(), Date\`\`);

target(new String());

target(new Number());

target(new BigInt());

target(new Boolean());

target(new Symbol());

target(new Object());

target(new Array());

target(new Function());

target(new RegExp());

target(new Date());

target(new Promise());

target(new Intl.Collator());

target(new Intl.DateTimeFormat());

target(new Intl.ListFormat());

target(new Intl.NumberFormat());

target(new Intl.PluralRules());

target(new Intl.RelativeTimeFormat());

target(new Intl.Segmenter());

target(new Int8Array());

target(new Uint8Array());

target(new Uint8ClampedArray());

target(new Int16Array());

target(new Uint16Array());

target(new Int32Array());

target(new Uint32Array());

target(new Float16Array());

target(new Float32Array());

target(new Float64Array());

target(new BigInt64Array());

target(new BigUint64Array());
 1`] = `
Array [
  Object {
    "args": Object {
      "String()": Array [
        "String",
      ],
      "String\`\`": Array [
        "String",
      ],
    },
    "expr": "target(String(), String\`\`)",
  },
  Object {
    "args": Object {
      "Number()": Array [
        "Number",
      ],
      "Number\`\`": Array [
        "Number",
      ],
    },
    "expr": "target(Number(), Number\`\`)",
  },
  Object {
    "args": Object {
      "BigInt()": Array [
        "BigInt",
      ],
      "BigInt\`\`": Array [
        "BigInt",
      ],
    },
    "expr": "target(BigInt(), BigInt\`\`)",
  },
  Object {
    "args": Object {
      "Boolean()": Array [
        "Boolean",
      ],
      "Boolean\`\`": Array [
        "Boolean",
      ],
    },
    "expr": "target(Boolean(), Boolean\`\`)",
  },
  Object {
    "args": Object {
      "Symbol()": Array [
        "Symbol",
      ],
      "Symbol\`\`": Array [
        "Symbol",
      ],
    },
    "expr": "target(Symbol(), Symbol\`\`)",
  },
  Object {
    "args": Object {
      "Object()": Array [
        "Object",
      ],
      "Object\`\`": Array [
        "Object",
      ],
    },
    "expr": "target(Object(), Object\`\`)",
  },
  Object {
    "args": Object {
      "Array\`\`": Array [
        "Array",
      ],
      "[]": Array [
        "Array",
      ],
    },
    "expr": "target([], Array\`\`)",
  },
  Object {
    "args": Object {
      "Function()": Array [
        "Function",
      ],
      "Function\`\`": Array [
        "Function",
      ],
    },
    "expr": "target(Function(), Function\`\`)",
  },
  Object {
    "args": Object {
      "RegExp()": Array [
        "RegExp",
      ],
      "RegExp\`\`": Array [
        "RegExp",
      ],
    },
    "expr": "target(RegExp(), RegExp\`\`)",
  },
  Object {
    "args": Object {
      "Date()": Array [
        "Date",
      ],
      "Date\`\`": Array [
        "Date",
      ],
    },
    "expr": "target(Date(), Date\`\`)",
  },
  Object {
    "args": Object {
      "new String()": Array [
        "String",
      ],
    },
    "expr": "target(new String())",
  },
  Object {
    "args": Object {
      "new Number()": Array [
        "Number",
      ],
    },
    "expr": "target(new Number())",
  },
  Object {
    "args": Object {
      "new BigInt()": Array [
        "BigInt",
      ],
    },
    "expr": "target(new BigInt())",
  },
  Object {
    "args": Object {
      "new Boolean()": Array [
        "Boolean",
      ],
    },
    "expr": "target(new Boolean())",
  },
  Object {
    "args": Object {
      "new Symbol()": Array [
        "Symbol",
      ],
    },
    "expr": "target(new Symbol())",
  },
  Object {
    "args": Object {
      "new Object()": Array [
        "Object",
      ],
    },
    "expr": "target(new Object())",
  },
  Object {
    "args": Object {
      "new Array()": Array [
        "Array",
      ],
    },
    "expr": "target(new Array())",
  },
  Object {
    "args": Object {
      "new Function()": Array [
        "Function",
      ],
    },
    "expr": "target(new Function())",
  },
  Object {
    "args": Object {
      "new RegExp()": Array [
        "RegExp",
      ],
    },
    "expr": "target(new RegExp())",
  },
  Object {
    "args": Object {
      "new Date()": Array [
        "Date",
      ],
    },
    "expr": "target(new Date())",
  },
  Object {
    "args": Object {
      "new Promise()": Array [
        "Promise",
      ],
    },
    "expr": "target(new Promise())",
  },
  Object {
    "args": Object {
      "new Intl.Collator()": Array [
        "Intl.Collator",
      ],
    },
    "expr": "target(new Intl.Collator())",
  },
  Object {
    "args": Object {
      "new Intl.DateTimeFormat()": Array [
        "Intl.DateTimeFormat",
      ],
    },
    "expr": "target(new Intl.DateTimeFormat())",
  },
  Object {
    "args": Object {
      "new Intl.ListFormat()": Array [
        "Intl.ListFormat",
      ],
    },
    "expr": "target(new Intl.ListFormat())",
  },
  Object {
    "args": Object {
      "new Intl.NumberFormat()": Array [
        "Intl.NumberFormat",
      ],
    },
    "expr": "target(new Intl.NumberFormat())",
  },
  Object {
    "args": Object {
      "new Intl.PluralRules()": Array [
        "Intl.PluralRules",
      ],
    },
    "expr": "target(new Intl.PluralRules())",
  },
  Object {
    "args": Object {
      "new Intl.RelativeTimeFormat()": Array [
        "Intl.RelativeTimeFormat",
      ],
    },
    "expr": "target(new Intl.RelativeTimeFormat())",
  },
  Object {
    "args": Object {
      "new Intl.Segmenter()": Array [
        "Intl.Segmenter",
      ],
    },
    "expr": "target(new Intl.Segmenter())",
  },
  Object {
    "args": Object {
      "new Int8Array()": Array [
        "Int8Array",
      ],
    },
    "expr": "target(new Int8Array())",
  },
  Object {
    "args": Object {
      "new Uint8Array()": Array [
        "Uint8Array",
      ],
    },
    "expr": "target(new Uint8Array())",
  },
  Object {
    "args": Object {
      "new Uint8ClampedArray()": Array [
        "Uint8ClampedArray",
      ],
    },
    "expr": "target(new Uint8ClampedArray())",
  },
  Object {
    "args": Object {
      "new Int16Array()": Array [
        "Int16Array",
      ],
    },
    "expr": "target(new Int16Array())",
  },
  Object {
    "args": Object {
      "new Uint16Array()": Array [
        "Uint16Array",
      ],
    },
    "expr": "target(new Uint16Array())",
  },
  Object {
    "args": Object {
      "new Int32Array()": Array [
        "Int32Array",
      ],
    },
    "expr": "target(new Int32Array())",
  },
  Object {
    "args": Object {
      "new Uint32Array()": Array [
        "Uint32Array",
      ],
    },
    "expr": "target(new Uint32Array())",
  },
  Object {
    "args": Object {
      "new Float16Array()": Array [
        "Float16Array",
      ],
    },
    "expr": "target(new Float16Array())",
  },
  Object {
    "args": Object {
      "new Float32Array()": Array [
        "Float32Array",
      ],
    },
    "expr": "target(new Float32Array())",
  },
  Object {
    "args": Object {
      "new Float64Array()": Array [
        "Float64Array",
      ],
    },
    "expr": "target(new Float64Array())",
  },
  Object {
    "args": Object {
      "new BigInt64Array()": Array [
        "BigInt64Array",
      ],
    },
    "expr": "target(new BigInt64Array())",
  },
  Object {
    "args": Object {
      "new BigUint64Array()": Array [
        "BigUint64Array",
      ],
    },
    "expr": "target(new BigUint64Array())",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES logical.js function _1() {
  const a = 1;
  const b = 1;
  const c = 1n;
  const d = 1n;
  target(
    a && b,
    c && d,
    foo && bar,
    42 && bar,
    foo && 42,
    42n && bar,
    foo && 42n,
  );
}

function _2() {
  const a = 1;
  const b = 1;
  const c = 1n;
  const d = 1n;
  target(
    a || b,
    c || d,
    foo || bar,
    42 || bar,
    foo || 42,
    42n || bar,
    foo || 42n,
  );
}

function _3() {
  const a = 1;
  const b = 1;
  const c = 1n;
  const d = 1n;
  target(
    a ?? b,
    c ?? d,
    foo ?? bar,
    42 ?? bar,
    foo ?? 42,
    42n ?? bar,
    foo ?? 42n,
  );
}
 1`] = `
Array [
  Object {
    "args": Object {
      "42 && bar": Array [],
      "42n && bar": Array [],
      "a && b": Array [
        "Number",
      ],
      "c && d": Array [
        "BigInt",
      ],
      "foo && 42": Array [],
      "foo && 42n": Array [],
      "foo && bar": Array [],
    },
    "expr": "target(
    a && b,
    c && d,
    foo && bar,
    42 && bar,
    foo && 42,
    42n && bar,
    foo && 42n,
  )",
  },
  Object {
    "args": Object {
      "42 || bar": Array [],
      "42n || bar": Array [],
      "a || b": Array [
        "Number",
      ],
      "c || d": Array [
        "BigInt",
      ],
      "foo || 42": Array [],
      "foo || 42n": Array [],
      "foo || bar": Array [],
    },
    "expr": "target(
    a || b,
    c || d,
    foo || bar,
    42 || bar,
    foo || 42,
    42n || bar,
    foo || 42n,
  )",
  },
  Object {
    "args": Object {
      "42 ?? bar": Array [],
      "42n ?? bar": Array [],
      "a ?? b": Array [
        "Number",
      ],
      "c ?? d": Array [
        "BigInt",
      ],
      "foo ?? 42": Array [],
      "foo ?? 42n": Array [],
      "foo ?? bar": Array [],
    },
    "expr": "target(
    a ?? b,
    c ?? d,
    foo ?? bar,
    42 ?? bar,
    foo ?? 42,
    42n ?? bar,
    foo ?? 42n,
  )",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES test.js target("foo");
target(42);
target(true);
target(/foo/);
target(null);
target(42n);
target([]);
target({});
target(function () {});
target(() => {});
target(a);
target(NaN);
target(Infinity);
target(undefined);
target(\`foo\`);
target(\`foo\${a}\`);

function _1() {
  const a = "i";
  target(a);
}

function _2() {
  function f() {}

  target(f);
}

function _3() {
  const a = b;
  target(a);
}

function _4() {
  const a = a;
  target(a);
}

function _5() {
  var a = "foo";
  var a = 42;
  target(a);
}

function _6() {
  var a = "foo";
  a = 42;
  var b = "bar";
  target(a, b);
}

function _7() {
  const a = "i";
  target("foo" + "bar");
  target(a + "foo");
  target("foo" + a + "bar");
}

function _8() {
  const a = "i";
  target(b + "bar");
  target("foo" + a + b);
}

function _9() {
  const a = 42;
  target(
    a + "bar",
    foo + "bar",
    "bar" + foo,
    42 + a,
    {} + 42,
    42 + null,
    42 + {},
    42n + foo,
    42 + foo,
  );
}

function _10() {
  let b = 42;
  target((b += "bar"));
}

function _11() {
  let b = 42;
  target((b = "bar"));
}

function _12() {
  target(!foo, delete foo.bar);
}

function _13() {
  target(+bar);
}

function _14() {
  target(typeof bar, void bar);
}

function _15() {
  target((foo, "bar"));
}

function _16() {
  target(class Foo {});
}

function _17() {
  target(a ? "a" : "b", a ? "a" : 42);
}

function _18() {
  target(a++, --a);
}

function _19() {
  target("".length);
}

function _20() {
  target(String.fromCharCode(42), String.fromCodePoint(42), String.raw\`\`);
}

function _21() {
  const { promise, resolve, reject } = Promise.withResolvers();
  target(promise, resolve, reject);
}

function _22() {
  const r = /foo/.exec("foo")[0];
  target(r);
}

function _23() {
  let array = [];
  array = [];
  target(array);
}

function _24() {
  let array = [];
  array = "";
  target(array);
}

function _25() {
  let { EPSILON: a } = Number;
  a = 42;
  ({ MAX_SAFE_INTEGER: a } = Number);
  target(a);
}

function _26() {
  let a = Number.isFinite;
  a = Number.isNaN;
  target(a(foo));
}

function _27() {
  let a = Number.isFinite;
  a = Number;
  target(a(foo));
}

function _28() {
  let { a = Number.isFinite } = { a: Number.isInteger };
  a = Number.isNaN;
  target(a(foo));
}

function _29() {
  target(Math.max(1, 2));
  target(Math.fround(5));
  target(Math.f16round(5));
}
 1`] = `
Array [
  Object {
    "args": Object {
      "\\"foo\\"": Array [
        "String",
      ],
    },
    "expr": "target(\\"foo\\")",
  },
  Object {
    "args": Object {
      "42": Array [
        "Number",
      ],
    },
    "expr": "target(42)",
  },
  Object {
    "args": Object {
      "true": Array [
        "Boolean",
      ],
    },
    "expr": "target(true)",
  },
  Object {
    "args": Object {
      "/foo/": Array [
        "RegExp",
      ],
    },
    "expr": "target(/foo/)",
  },
  Object {
    "args": Object {
      "null": Array [
        "null",
      ],
    },
    "expr": "target(null)",
  },
  Object {
    "args": Object {
      "42n": Array [
        "BigInt",
      ],
    },
    "expr": "target(42n)",
  },
  Object {
    "args": Object {
      "[]": Array [
        "Array",
      ],
    },
    "expr": "target([])",
  },
  Object {
    "args": Object {
      "{}": Array [
        "Object",
      ],
    },
    "expr": "target({})",
  },
  Object {
    "args": Object {
      "function () {}": Array [
        "Function",
      ],
    },
    "expr": "target(function () {})",
  },
  Object {
    "args": Object {
      "() => {}": Array [
        "Function",
      ],
    },
    "expr": "target(() => {})",
  },
  Object {
    "args": Object {
      "a": Array [],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "NaN": Array [
        "Number",
      ],
    },
    "expr": "target(NaN)",
  },
  Object {
    "args": Object {
      "Infinity": Array [
        "Number",
      ],
    },
    "expr": "target(Infinity)",
  },
  Object {
    "args": Object {
      "undefined": Array [
        "undefined",
      ],
    },
    "expr": "target(undefined)",
  },
  Object {
    "args": Object {
      "\`foo\`": Array [
        "String",
      ],
    },
    "expr": "target(\`foo\`)",
  },
  Object {
    "args": Object {
      "\`foo\${a}\`": Array [
        "String",
      ],
    },
    "expr": "target(\`foo\${a}\`)",
  },
  Object {
    "args": Object {
      "a": Array [
        "String",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "f": Array [
        "Function",
      ],
    },
    "expr": "target(f)",
  },
  Object {
    "args": Object {
      "a": Array [],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [],
      "b": Array [
        "String",
      ],
    },
    "expr": "target(a, b)",
  },
  Object {
    "args": Object {
      "\\"foo\\" + \\"bar\\"": Array [
        "String",
      ],
    },
    "expr": "target(\\"foo\\" + \\"bar\\")",
  },
  Object {
    "args": Object {
      "a + \\"foo\\"": Array [
        "String",
      ],
    },
    "expr": "target(a + \\"foo\\")",
  },
  Object {
    "args": Object {
      "\\"foo\\" + a + \\"bar\\"": Array [
        "String",
      ],
    },
    "expr": "target(\\"foo\\" + a + \\"bar\\")",
  },
  Object {
    "args": Object {
      "b + \\"bar\\"": Array [
        "String",
      ],
    },
    "expr": "target(b + \\"bar\\")",
  },
  Object {
    "args": Object {
      "\\"foo\\" + a + b": Array [
        "String",
      ],
    },
    "expr": "target(\\"foo\\" + a + b)",
  },
  Object {
    "args": Object {
      "\\"bar\\" + foo": Array [
        "String",
      ],
      "42 + a": Array [
        "Number",
      ],
      "42 + foo": Array [],
      "42 + null": Array [
        "Number",
      ],
      "42 + {}": Array [
        "String",
      ],
      "42n + foo": Array [
        "BigInt",
      ],
      "a + \\"bar\\"": Array [
        "String",
      ],
      "foo + \\"bar\\"": Array [
        "String",
      ],
      "{} + 42": Array [
        "Number",
      ],
    },
    "expr": "target(
    a + \\"bar\\",
    foo + \\"bar\\",
    \\"bar\\" + foo,
    42 + a,
    {} + 42,
    42 + null,
    42 + {},
    42n + foo,
    42 + foo,
  )",
  },
  Object {
    "args": Object {
      "b += \\"bar\\"": Array [
        "String",
      ],
    },
    "expr": "target((b += \\"bar\\"))",
  },
  Object {
    "args": Object {
      "b = \\"bar\\"": Array [
        "String",
      ],
    },
    "expr": "target((b = \\"bar\\"))",
  },
  Object {
    "args": Object {
      "!foo": Array [
        "Boolean",
      ],
      "delete foo.bar": Array [
        "Boolean",
      ],
    },
    "expr": "target(!foo, delete foo.bar)",
  },
  Object {
    "args": Object {
      "+bar": Array [
        "Number",
      ],
    },
    "expr": "target(+bar)",
  },
  Object {
    "args": Object {
      "typeof bar": Array [
        "String",
      ],
      "void bar": Array [
        "undefined",
      ],
    },
    "expr": "target(typeof bar, void bar)",
  },
  Object {
    "args": Object {
      "foo, \\"bar\\"": Array [
        "String",
      ],
    },
    "expr": "target((foo, \\"bar\\"))",
  },
  Object {
    "args": Object {
      "class Foo {}": Array [
        "Function",
      ],
    },
    "expr": "target(class Foo {})",
  },
  Object {
    "args": Object {
      "a ? \\"a\\" : \\"b\\"": Array [
        "String",
      ],
      "a ? \\"a\\" : 42": Array [],
    },
    "expr": "target(a ? \\"a\\" : \\"b\\", a ? \\"a\\" : 42)",
  },
  Object {
    "args": Object {
      "--a": Array [
        "Number",
      ],
      "a++": Array [
        "Number",
      ],
    },
    "expr": "target(a++, --a)",
  },
  Object {
    "args": Object {
      "\\"\\".length": Array [
        "Number",
      ],
    },
    "expr": "target(\\"\\".length)",
  },
  Object {
    "args": Object {
      "String.fromCharCode(42)": Array [
        "String",
      ],
      "String.fromCodePoint(42)": Array [
        "String",
      ],
      "String.raw\`\`": Array [
        "String",
      ],
    },
    "expr": "target(String.fromCharCode(42), String.fromCodePoint(42), String.raw\`\`)",
  },
  Object {
    "args": Object {
      "promise": Array [
        "Promise",
      ],
      "reject": Array [
        "Function",
      ],
      "resolve": Array [
        "Function",
      ],
    },
    "expr": "target(promise, resolve, reject)",
  },
  Object {
    "args": Object {
      "r": Array [
        "String",
      ],
    },
    "expr": "target(r)",
  },
  Object {
    "args": Object {
      "array": Array [
        "Array",
      ],
    },
    "expr": "target(array)",
  },
  Object {
    "args": Object {
      "array": Array [],
    },
    "expr": "target(array)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Number",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a(foo)": Array [
        "Boolean",
      ],
    },
    "expr": "target(a(foo))",
  },
  Object {
    "args": Object {
      "a(foo)": Array [],
    },
    "expr": "target(a(foo))",
  },
  Object {
    "args": Object {
      "a(foo)": Array [
        "Boolean",
      ],
    },
    "expr": "target(a(foo))",
  },
  Object {
    "args": Object {
      "Math.max(1, 2)": Array [
        "Number",
      ],
    },
    "expr": "target(Math.max(1, 2))",
  },
  Object {
    "args": Object {
      "Math.fround(5)": Array [
        "Number",
      ],
    },
    "expr": "target(Math.fround(5))",
  },
  Object {
    "args": Object {
      "Math.f16round(5)": Array [
        "Number",
      ],
    },
    "expr": "target(Math.f16round(5))",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES uint8array.js target(Uint8Array.fromBase64, Uint8Array.fromHex);

const u = new Uint8Array(10);
target(
  u,
  u.at,
  u.fill(),
  u[Symbol.toStringTag],
  u.toBase64,
  u.toHex,
  u.setFromBase64,
  u.setFromHex,
  u.toBase64(),
  u.toHex(),
);
 1`] = `
Array [
  Object {
    "args": Object {
      "Uint8Array.fromBase64": Array [
        "Function",
      ],
      "Uint8Array.fromHex": Array [
        "Function",
      ],
    },
    "expr": "target(Uint8Array.fromBase64, Uint8Array.fromHex)",
  },
  Object {
    "args": Object {
      "u": Array [
        "Uint8Array",
      ],
      "u.at": Array [
        "Function",
      ],
      "u.fill()": Array [
        "Uint8Array",
      ],
      "u.setFromBase64": Array [
        "Function",
      ],
      "u.setFromHex": Array [
        "Function",
      ],
      "u.toBase64": Array [
        "Function",
      ],
      "u.toBase64()": Array [
        "String",
      ],
      "u.toHex": Array [
        "Function",
      ],
      "u.toHex()": Array [
        "String",
      ],
      "u[Symbol.toStringTag]": Array [
        "String",
      ],
    },
    "expr": "target(
  u,
  u.at,
  u.fill(),
  u[Symbol.toStringTag],
  u.toBase64,
  u.toHex,
  u.setFromBase64,
  u.setFromHex,
  u.toBase64(),
  u.toHex(),
)",
  },
]
`;

exports[`type-tracer-for-es buildTypeTracerForES unary.js target(-foo, -42, -42n);

target(~foo, ~42, ~42n);
 1`] = `
Array [
  Object {
    "args": Object {
      "-42": Array [
        "Number",
      ],
      "-42n": Array [
        "BigInt",
      ],
      "-foo": Array [],
    },
    "expr": "target(-foo, -42, -42n)",
  },
  Object {
    "args": Object {
      "~42": Array [
        "Number",
      ],
      "~42n": Array [
        "BigInt",
      ],
      "~foo": Array [],
    },
    "expr": "target(~foo, ~42, ~42n)",
  },
]
`;
