// test-snapshot v1

exports[`type-tracer-for-ts buildTypeTracerForTS array.ts import { target } from "./target";

const a = [1, 2, 3, 4, 5];

target([], a);

function fn<X extends any[]>(
  a: readonly number[],
  b: readonly number[],
  c: X,
): void {
  target(a, b, c);

  target(a[0], b[0], c[0]);
}
 1`] = `
Array [
  Object {
    "expr": "target([], a)",
    "types": Array [
      Array [
        "Array",
      ],
      Array [
        "Array",
      ],
    ],
  },
  Object {
    "expr": "target(a, b, c)",
    "types": Array [
      Array [
        "Array",
      ],
      Array [
        "Array",
      ],
      Array [
        "Array",
      ],
    ],
  },
  Object {
    "expr": "target(a[0], b[0], c[0])",
    "types": Array [
      Array [
        "Number",
      ],
      Array [
        "Number",
      ],
      Array [],
    ],
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS boolean.ts import { target } from "./target";

const a = true;

target(a);

function fn<X extends true>(a: boolean, b: false, c: X): void {
  target(a, b, c);
}
 1`] = `
Array [
  Object {
    "expr": "target(a)",
    "types": Array [
      Array [
        "Boolean",
      ],
    ],
  },
  Object {
    "expr": "target(a, b, c)",
    "types": Array [
      Array [
        "Boolean",
      ],
      Array [
        "Boolean",
      ],
      Array [
        "Boolean",
      ],
    ],
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS function.ts import { target } from "./target";

target(fn, String);

function fn<X extends (...arg: any[]) => void>(
  a: { (a: any): void },
  b: () => unknown,
  c: X,
): void {
  target(a, b, c);
}
 1`] = `
Array [
  Object {
    "expr": "target(fn, String)",
    "types": Array [
      Array [
        "Function",
      ],
      Array [
        "Function",
      ],
    ],
  },
  Object {
    "expr": "target(a, b, c)",
    "types": Array [
      Array [
        "Function",
      ],
      Array [
        "Function",
      ],
      Array [
        "Function",
      ],
    ],
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS object.ts import { target } from "./target";

const a = {};

target(a);
 1`] = `
Array [
  Object {
    "expr": "target(a)",
    "types": Array [
      Array [],
    ],
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS string.ts import { target } from "./target";

const a = "Hello, World!";

target(a);

function fn<X extends "foo">(a: string, b: \`Hello, \${string}\`, c: X): void {
  target(a, b, c);

  target(a[0], b[0], c[0]);
}
 1`] = `
Array [
  Object {
    "expr": "target(a)",
    "types": Array [
      Array [
        "String",
      ],
    ],
  },
  Object {
    "expr": "target(a, b, c)",
    "types": Array [
      Array [
        "String",
      ],
      Array [
        "String",
      ],
      Array [
        "String",
      ],
    ],
  },
  Object {
    "expr": "target(a[0], b[0], c[0])",
    "types": Array [
      Array [
        "String",
      ],
      Array [
        "String",
      ],
      Array [
        "String",
      ],
    ],
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS target.ts export function target(...args: any[]): void {
  throw new Error("For Test");
}
 1`] = `Array []`;
