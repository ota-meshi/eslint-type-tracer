// test-snapshot v1

exports[`type-tracer-for-ts buildTypeTracerForTS array.ts import { target } from "./target";

const a = [1, 2, 3, 4, 5];

target([], a);

function fn<X extends any[]>(
  a: readonly number[],
  b: ReadonlyArray<number>,
  c: X,
  d: [string],
): void {
  target(a, b, c, d);

  target(a[0], b[0], c[0], d[0]);
}
 1`] = `
Array [
  Object {
    "args": Object {
      "[]": Array [
        "Array",
      ],
      "a": Array [
        "Array",
      ],
    },
    "expr": "target([], a)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Array",
      ],
      "b": Array [
        "Array",
      ],
      "c": Array [
        "Array",
      ],
      "d": Array [
        "Array",
      ],
    },
    "expr": "target(a, b, c, d)",
  },
  Object {
    "args": Object {
      "a[0]": Array [
        "Number",
      ],
      "b[0]": Array [
        "Number",
      ],
      "c[0]": Array [],
      "d[0]": Array [
        "String",
      ],
    },
    "expr": "target(a[0], b[0], c[0], d[0])",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS bigint.ts import { target } from "./target";

const a = 1n;

target(a);

function fn<X extends 2n>(a: bigint, b: number, c: X): void {
  target(a, BigInt(b), c);
}
 1`] = `
Array [
  Object {
    "args": Object {
      "a": Array [
        "BigInt",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "BigInt(b)": Array [
        "BigInt",
      ],
      "a": Array [
        "BigInt",
      ],
      "c": Array [
        "BigInt",
      ],
    },
    "expr": "target(a, BigInt(b), c)",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS boolean.ts import { target } from "./target";

const a = true;

target(a);

function fn<X extends true>(a: boolean, b: false, c: X): void {
  target(a, b, c);
}
 1`] = `
Array [
  Object {
    "args": Object {
      "a": Array [
        "Boolean",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Boolean",
      ],
      "b": Array [
        "Boolean",
      ],
      "c": Array [
        "Boolean",
      ],
    },
    "expr": "target(a, b, c)",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS function.ts import { target } from "./target";

target(fn, String);

function fn<X extends (...arg: any[]) => void>(
  a: { (a: any): void },
  b: () => unknown,
  c: X,
): void {
  target(a, b, c);
}

target(function fn() {});

target(() => {});

function _1() {
  let foo = function () {};
  target(foo);
}

function _2() {
  let foo = () => {};
  target(foo);
}

function _3() {
  function foo() {}

  target(foo);
}

function f(a: () => number) {
  target(a);
}

function _4() {
  let foo = { fn() {} };
  target(foo.fn);
}

target(Object.assign);

function _5() {
  class Foo {
    // @ts-expect-error -- test
    fn();
  }
  const foo = new Foo();
  target(foo.fn);
}

function _6() {
  let foo = Function();
  target(foo);
}

function _7() {
  let foo = String;
  target(foo);
}

function _8() {
  function f<T extends (a: any) => T>(a: T) {
    target(a);
  }
}

function _9() {
  function f<T extends ((a: any) => T) | "union">(a: T) {
    target(a);
  }
}
 1`] = `
Array [
  Object {
    "args": Object {
      "String": Array [
        "Function",
      ],
      "fn": Array [
        "Function",
      ],
    },
    "expr": "target(fn, String)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Function",
      ],
      "b": Array [
        "Function",
      ],
      "c": Array [
        "Function",
      ],
    },
    "expr": "target(a, b, c)",
  },
  Object {
    "args": Object {
      "function fn() {}": Array [
        "Function",
      ],
    },
    "expr": "target(function fn() {})",
  },
  Object {
    "args": Object {
      "() => {}": Array [
        "Function",
      ],
    },
    "expr": "target(() => {})",
  },
  Object {
    "args": Object {
      "foo": Array [
        "Function",
      ],
    },
    "expr": "target(foo)",
  },
  Object {
    "args": Object {
      "foo": Array [
        "Function",
      ],
    },
    "expr": "target(foo)",
  },
  Object {
    "args": Object {
      "foo": Array [
        "Function",
      ],
    },
    "expr": "target(foo)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Function",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "foo.fn": Array [
        "Function",
      ],
    },
    "expr": "target(foo.fn)",
  },
  Object {
    "args": Object {
      "Object.assign": Array [
        "Function",
      ],
    },
    "expr": "target(Object.assign)",
  },
  Object {
    "args": Object {
      "foo.fn": Array [
        "Function",
      ],
    },
    "expr": "target(foo.fn)",
  },
  Object {
    "args": Object {
      "foo": Array [
        "Function",
      ],
    },
    "expr": "target(foo)",
  },
  Object {
    "args": Object {
      "foo": Array [
        "Function",
      ],
    },
    "expr": "target(foo)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Function",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Function",
      ],
    },
    "expr": "target(a)",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS intl.ts import { target } from "./target";

target(new Intl.Segmenter());

function fn<X extends Intl.Segmenter>(a: Intl.Segmenter, b: X): void {
  target(a, b);
}
 1`] = `
Array [
  Object {
    "args": Object {
      "new Intl.Segmenter()": Array [
        "Intl.Segmenter",
      ],
    },
    "expr": "target(new Intl.Segmenter())",
  },
  Object {
    "args": Object {
      "a": Array [
        "Intl.Segmenter",
      ],
      "b": Array [
        "Intl.Segmenter",
      ],
    },
    "expr": "target(a, b)",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS object.ts import { target } from "./target";

const a = {};

target(a);
 1`] = `
Array [
  Object {
    "args": Object {
      "a": Array [],
    },
    "expr": "target(a)",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS string.ts import { target } from "./target";

const a = "Hello, World!";

target(a);

function fn<X extends "foo">(a: string, b: \`Hello, \${string}\`, c: X): void {
  target(a, b, c);

  target(a[0], b[0], c[0]);
}
 1`] = `
Array [
  Object {
    "args": Object {
      "a": Array [
        "String",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [
        "String",
      ],
      "b": Array [
        "String",
      ],
      "c": Array [
        "String",
      ],
    },
    "expr": "target(a, b, c)",
  },
  Object {
    "args": Object {
      "a[0]": Array [
        "String",
      ],
      "b[0]": Array [
        "String",
      ],
      "c[0]": Array [
        "String",
      ],
    },
    "expr": "target(a[0], b[0], c[0])",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS symbol.ts import { target } from "./target";

const a = Symbol.iterator;

target(a);

function fn<X extends symbol>(a: symbol, b: typeof a, c: X): void {
  target(a, b, c);
}
 1`] = `
Array [
  Object {
    "args": Object {
      "a": Array [
        "Symbol",
      ],
    },
    "expr": "target(a)",
  },
  Object {
    "args": Object {
      "a": Array [
        "Symbol",
      ],
      "b": Array [
        "Symbol",
      ],
      "c": Array [
        "Symbol",
      ],
    },
    "expr": "target(a, b, c)",
  },
]
`;

exports[`type-tracer-for-ts buildTypeTracerForTS target.ts export function target(...args: any[]): void {
  throw new Error("For Test");
}
 1`] = `Array []`;
